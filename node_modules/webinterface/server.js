var http = require('http');
var static = require('node-static');
var file = new static.Server('.');
var querystring = require('querystring');
var amqp = require('amqplib/callback_api');
var results = [];
var semaphore = 0; // на всякий случай для синхронизации, хрен его знает этот js, хотя наверняка встроена какая-нибудь race condition защита

function processPost(request, response, callback) {
    var queryData = "";
    if(typeof callback !== 'function') return null;

    if(request.method == 'POST') {
        request.on('data', function(data) {
            queryData += data;
            if(queryData.length > 1e6) {
                queryData = "";
                response.writeHead(413, {'Content-Type': 'text/plain'}).end();
                request.connection.destroy();
            }
        });

        request.on('end', function() {
            request.post = querystring.parse(queryData);
            callback();
        });

    } else {
        response.writeHead(405, {'Content-Type': 'text/plain'});
        response.end();
    }
}

http.createServer(function(request, response) {
    if (request.method == 'POST') {
            processPost(request, response, function() {
                console.log(request.post);
                var arrayOfUrls = request.post.ulist.split('\r\n');
                // Use request.post here
                amqp.connect('amqp://localhost', function(err, conn) {
                      conn.createChannel(function(err, ch) {
                            var URL_ALGO_QUEUE = 'url_algo_queue'; // это всё впоследствии грузить из настроек, пока так
                            var IMAGE_ALGO_QUEUE = 'image_algo_queue';

                            ch.assertQueue(URL_ALGO_QUEUE, {durable: true });
                            ch.assertQueue(IMAGE_ALGO_QUEUE, {durable: true });
                            var i,j,temparray,chunk;
                            var URL_WORKERS_AMOUNT = 1;
                            var IMAGE_WORKERS_AMOUNT = 1;
                            for (i=0,j=arrayOfUrls.length,chunk=URL_WORKERS_AMOUNT; i<j; i+=chunk) {
                                temparray = arrayOfUrls.slice(i,i+chunk);
                                if (temparray.toString() != '') {
                                    ch.sendToQueue(URL_ALGO_QUEUE, new Buffer(JSON.stringify(temparray)));
                                    console.log(" [x] Sent to %s %s", URL_ALGO_QUEUE, temparray.toString());
                                }
                            }
                            for (i=0,j=arrayOfUrls.length,chunk=IMAGE_WORKERS_AMOUNT; i<j; i+=chunk) {
                                temparray = arrayOfUrls.slice(i,i+chunk);
                                if (temparray.toString() != '') {
                                    ch.sendToQueue(IMAGE_ALGO_QUEUE, new Buffer(JSON.stringify(temparray)));
                                    console.log(" [x] Sent to %s %s", IMAGE_ALGO_QUEUE, temparray.toString());
                                }
                            }
                            // Note: on Node 6 Buffer.from(msg) should be used
                      });
                   setTimeout(function() { conn.close(); }, 500);
                });

                response.writeHead(200, "OK", {'Content-Type': 'text/plain'});
                response.end();
            });
    } else if (request.method == "GET") {
        if (request.url.indexOf("checker") !== -1) {
            semaphore = 1;
            response.writeHead(200, "OK", {'Content-Type': 'application/json'});
            response.write(JSON.stringify(results))
            response.end();
            results = [];
            semaphore = 0;
        } else {
            file.serve(request, response);
        }
    }
}).listen(8080);

console.log('Server running on port 8080');

amqp.connect('amqp://localhost', function(err, conn) {
  conn.createChannel(function(err, ch) {
    var q = 'website_queue';

    ch.assertQueue(q, {durable: true});
    console.log(" [*] Waiting for messages in %s. To exit press CTRL+C", q);
    ch.consume(q, function(msg) {
      console.log(" [x] Received %s", msg.content.toString());
      if (!semaphore) {
          results.push(JSON.parse(msg.content));
      }
    }, {noAck: false});
  });
});